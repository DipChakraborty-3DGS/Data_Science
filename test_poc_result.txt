def add_custom_canal_options(self):
        added_arcs = set()
        #Initialize travel_days_dict and gate_cost_dict
        canal_travel_days_dict={}
        canal_cost_dict={}
        passby_canal_dict={}
        passby_canal_travel_days_dict={}
        passby_canal_cost_dict={}
        source_to_end_path_dict={}

        for arc in sorted(self.arcs, key=lambda x: (x.upstr.window_start, x.dwnstr.window_start)):
            # print( ' ******* Coming here in add_custom_canal_options arc: --->>> ',arc)
            added_arcs.add(arc)
            arc.calculate_travel_days(self.inputData)
            # check canal options if faster. This is using the min_travel_time_canal_selection function.
            # Think original function needs to be fixed
            min_t_days = 100
            p_min = 0

            total_travel_days = 0
            total_canal_cost = 0
           
            
            for p in range(len(self.inputData._canal_options)):
                t_days = ports_distance_days_2(
                    self.inputData,
                    arc.upstr.port,
                    arc.dwnstr.port,
                    transport_mode=arc.route_type.capitalize(),
                    vessel_speed= arc.vessel.ladenAvgSpeed if arc.route_type == 'laden' else arc.vessel.ballastAvgSpeed,
                    p=p,
                )
              
                if t_days is not None and t_days < min_t_days:
                    p_min = p
                    min_t_days = t_days
              
                if p_min != 0:
                    (
                    canalDirection,
                    port_destination_in,
                    port_destination_out,
                    t_days,
                    _,
                    _,
                    _,
                    ) = canal_direction_info_in(self.config, self.inputData, arc.arc_upstr_window_start + arc.port_days, arc.upstr.port, arc.dwnstr.port, p_min)
                    # print(' **** Getting canalDirection canalDirection value: ***** --->>> ',canalDirection)
                   
                    if canalDirection is not None:
                     # day arriving at the canal port
                        new_from_i = arc.arc_upstr_window_start + arc.port_days + t_days
                        new_to_i = arc.arc_upstr_window_end + arc.port_days + t_days
                        # print(' **** Getting  arc_upstr_window_start value: ***** --->>> ',arc.arc_upstr_window_start)
                        # print(' **** Getting  arc_upstr_window_end value: ***** --->>> ',arc.arc_upstr_window_end)
                        # print(' **** Getting  new_from_i value: ***** --->>> ',new_from_i)
                        # print(' **** Getting  new_to_i value: ***** --->>> ',new_to_i)
                        #Updated total_travel_days  upto canal_in node
                        total_travel_days+=arc.port_days + t_days
                        # print(' **** Getting  total_travel_days source_to_canal_in value: ***** --->>> ',total_travel_days)
                        
                        if "panama" in self.inputData._canal_options[p].lower():
                            # if Vessels.info[v]["oldPanLockCompatible"]:
                            if arc.vessel.oldPanLockCompatibleoldPanLockCompatible:
                                # if true we can use both canals
                                canal_options = [2, 3]
                            else:
                                # if false we can only use neopanama
                                canal_options = [2]
                        else:
                            canal_options = [p]

                        # add auction canal in
                       
                       # print(' **** Getting port_destination_out canal_options value: ***** --->>> ',canal_options)
                        # Added arc from arc.upstr to canal-in
                         # add auction canal out
                        canal_in_node = Node(new_from_i, new_to_i, 'canal(in)', port_destination_in, self.inputData.port_to_region[port_destination_in])
                       
                         # add arc from origin to canal in
                        in_arc = Arc(arc.vessel, arc.upstr, canal_in_node, arc.route_type)
                        added_arcs.add(in_arc)
                        passby_canal_dict[(arc.upstr.node_id, canal_in_node.node_id)] = in_arc
                        passby_canal_travel_days_dict[(arc.upstr.node_id, canal_in_node.node_id)]=total_travel_days
                        passby_canal_cost_dict[(arc.upstr.node_id, canal_in_node.node_id)]=total_canal_cost
                        for c_opt in canal_options:
                            canal_days, canalCost, canalBooking = (
                                canal_cost_and_time(
                                    self.inputData,
                                    new_from_i,
                                    port_destination_in,
                                    port_destination_out,
                                    p=c_opt,
                                    auction_=True,
                                )
                            )
                            # print(' **** Getting  Canal_days value: ***** --->>> ',canal_days)
                            # print(' **** Getting  canalCost value: ***** --->>> ',canalCost)
                            # print(' **** Getting  canalBooking value: ***** --->>> ',canalBooking)
                            #Updated total_travel_days and total_canal_cost after canal_out node 
                            total_travel_days+=canal_days
                            total_canal_cost+=canalCost
                            # print(' **** Getting  total_travel_days after canal-in and canal-out node value: ***** --->>> ',total_travel_days)
                            # print(' **** Getting  total_canal_cost after canal-in and canal-out node value: ***** --->>> ',total_canal_cost)

                            #  #####
                            canal_out_node = Node(new_from_i + canal_days, new_to_i + canal_days, 'canal(out)', port_destination_out, self.inputData.port_to_region[port_destination_out])
                           
                            #add arc between canal in and canal out
                            between_arc = Arc(arc.vessel, canal_in_node, canal_out_node, arc.route_type)
                            between_arc.canal = c_opt
                            added_arcs.add(between_arc)
                            passby_canal_dict[(canal_in_node.node_id, canal_out_node.node_id)] = between_arc
                            passby_canal_travel_days_dict[(canal_in_node.node_id, canal_out_node.node_id)]=total_travel_days
                            passby_canal_cost_dict[(canal_in_node.node_id, canal_out_node.node_id)]=total_canal_cost

                            #add arc between canal out and canal destination
                            out_arc = Arc(arc.vessel, canal_out_node, arc.dwnstr, arc.route_type)
                            added_arcs.add(out_arc)
                            passby_canal_dict[(canal_out_node.node_id, arc.dwnstr.node_id)] = out_arc
                            passby_canal_travel_days_dict[(canal_out_node.node_id, arc.dwnstr.node_id)]=total_travel_days
                            passby_canal_cost_dict[(canal_out_node.node_id, arc.dwnstr.node_id)]=total_canal_cost

                            source_to_end_path_dict[(arc.upstr.node_id,arc.dwnstr.node_id)]={'canal_in':canal_in_node.node_id,'canal_out':canal_out_node.node_id}

                        canal_travel_days_dict[(arc.upstr.node_id,arc.dwnstr.node_id)]=total_travel_days
                        canal_cost_dict[(arc.upstr.node_id,arc.dwnstr.node_id)]=total_canal_cost
                    
                          # print('****** Coming here final canal_travel_days_dict : --->>> ',canal_travel_days_dict)
        
        # if (total_travel_days !=0):
        #     canal_travel_days_dict[(arc.upstr.node_id,arc.dwnstr.node_id)]=total_travel_days
        # if(total_canal_cost != 0):
        #     canal_cost_dict[(arc.upstr.node_id,arc.dwnstr.node_id)]=total_canal_cost
        print('****** Coming here final canal_travel_days_dict : --->>> ',canal_travel_days_dict)
        print('****** Coming here final canal_cost_dict : --->>> ',canal_cost_dict)
        print('****** Coming here final passby_canal_dict : --->>> ',passby_canal_dict)
        print('****** Coming here final passby_canal_travel_days_dict : --->>> ',passby_canal_travel_days_dict)
        print('****** Coming here final passby_canal_cost_dict : --->>> ',passby_canal_cost_dict)
        for arc in added_arcs:
            arc.calculate_travel_days(self.inputData)
            if arc.feasible:
                    self.addArc(arc)
